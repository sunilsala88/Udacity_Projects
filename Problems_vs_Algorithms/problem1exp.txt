
Algorithm:

when we are findng the floor of the sqrt of a number X, then we are searching for a number N in the range (0, X) that meets a the condition N^2 = X or (N^2 < X) and ((N+1)^2 > X), since the range (0, X) is sorted, we can use a version of binary search:


Start with ‘start’ = 0, end = ‘x’,
Do following while ‘start’ is smaller than or equal to ‘end’.
Compute ‘mid’ as (start + end)/2
compare mid*mid with x.
If x is equal to mid*mid, return mid.
If x is greater, do binary search between mid+1 and end. In this case, ans is also updated.
If x is smaller, do binary search between start and mid


Time Complexity: Since our algorithem halves the search range every iteration and performs O(1) calculations on every iteration then our Time complexity is O(log(n)).

Space Complexity: O(1) since we only use a the same ammount of memory (four variables only (current_num, previous_num, current_square, next_square)) regardles of the input