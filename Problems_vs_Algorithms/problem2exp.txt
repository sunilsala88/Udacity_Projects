
when searching for a number in an array that is sorted then rotated we can use a modified version of binary search, we only need to change the conditions on which we search one half or the other after testing the middle. instead of testing if the target is greater than or smaller than the middle, we test the halfs of the array:

we test the middle, if it's the target then we return the middle index.
otherwise we check one side, if it's ordered (ex: value at last index greater than the one at the middle for the right side) we test if the target value is between the two values at the edges, otherwise if it's not odered (then it's the rotated half) we test that the target value is greater than the start or smaller than the end.
otherwise it must be in the other half or doesn't exist.

Time Complexity:
Time complexity of the searching is O(logn). We can easily know which half is sorted by comparing start and end element of each half.Once we find which half is sorted we can see if the key is present in that half - simple comparison with the extremes.If the key is present in that half we recursively call the function on that half else we recursively call our search on the other half.We are discarding one half of the array in each call which makes this algorithm O(logN).

Time Complexity:
Space complexity is O(1).
